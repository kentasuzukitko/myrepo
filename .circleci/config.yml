version: 2.1
orbs:
  azure-cli: circleci/azure-cli@1.1.0
jobs:
  build:
    docker:
      - image: circleci/node:4.8.2
    steps:
      - checkout
      - run: echo "hello world"

# This code is licensed from CircleCI to the user under the MIT license. See
# https://circleci.com/orbs/registry/licensing for details.
commands:
  install:
    description: |
      Install the Azure CLI, if not available
    steps:
    - run:
        command: |
          # Verify the CLI isn't already installed
          # Use which instead of command -v for wider coverage of envs

          if which az > /dev/null; then
            echo "Azure CLI installed already."
            exit 0
          fi

          # Set sudo to work whether logged in as root user or non-root user

          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          $SUDO apt-get update && $SUDO apt-get -qqy install apt-transport-https

          if [[ $(command -v lsb_release) == "" ]]; then
            echo "Installing lsb_release"
            $SUDO apt-get -qqy install lsb-release
          fi

          # Create an environment variable for the correct distribution
          export AZ_REPO=$(lsb_release -cs)

          # Modify your sources list

          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
            $SUDO tee /etc/apt/sources.list.d/azure-cli.list

          if [[ $(command -v curl) == "" ]]; then
            echo "Installing curl"
            $SUDO apt-get -qqy install curl
          fi

          # Get the Microsoft signing key

          curl -L https://packages.microsoft.com/keys/microsoft.asc | $SUDO apt-key add -

          # Update and install the Azure CLI

          $SUDO apt-get update
          $SUDO apt-get -qqy install \
            ca-certificates \
            azure-cli
          echo "Azure CLI is now installed."
        name: Install Azure CLI, if not available
  login-with-service-principal:
    description: Initilize the Azure CLI
    parameters:
      azure-sp:
        default: AZURE_SP
        description: |
          Name of environment variable storing the full name of the Service Principal, in the form http://app-url
        type: env_var_name
      azure-sp-password:
        default: AZURE_SP_PASSWORD
        description: |
          Name of environment variable storing the password for the Service Principal
        type: env_var_name
      azure-sp-tenant:
        default: AZURE_SP_TENANT
        description: |
          Name of environment variable storing the tenant ID for the Service Principal
        type: env_var_name
    steps:
    - run:
        command: |
          az login \
            --service-principal \
            --tenant $<<parameters.azure-sp-tenant>> \
            -u $<<parameters.azure-sp>> \
            -p $<<parameters.azure-sp-password>>
        name: Login to the Azure CLI via Service Principal
  login-with-user:
    description: Initilize the Azure CLI
    parameters:
      alternate-tenant:
        default: false
        description: Use an alternate tenant
        type: boolean
      azure-password:
        default: AZURE_PASSWORD
        description: |
          Environment variable storing your Azure password
        type: env_var_name
      azure-tenant:
        default: AZURE_TENANT
        description: |
          Environment variable storing your Azure tenant, necessary if `alternate-tenant` is set to true
        type: env_var_name
      azure-username:
        default: AZURE_USERNAME
        description: |
          Environment variable storing your Azure username
        type: env_var_name
    steps:
    - run:
        command: |
          az login \
            <<#parameters.alternate-tenant>> \
            --tenant $<<parameters.azure-tenant>> <</parameters.alternate-tenant>> \
            -u $<<parameters.azure-username>> \
            -p $<<parameters.azure-password>>
        name: Login to the Azure CLI via username/password
  login-with-user-or-service-principal:
    description: |
      Initilize the Azure CLI. Supports login either with a user or with a Service Principal. The type of login is determined by checking if the environment variable storing the Azure username or the environment variable storing the name of the Service Principal is set to a non-empty value.
    parameters:
      alternate-tenant:
        default: false
        description: Use an alternate tenant. Only applicable for user logins.
        type: boolean
      azure-password:
        default: AZURE_PASSWORD
        description: |
          Environment variable storing your Azure password. Only applicable for user logins.
        type: env_var_name
      azure-sp:
        default: AZURE_SP
        description: |
          Name of environment variable storing the full name of the Service Principal, in the form http://app-url. Only applicable for Service Principal logins.
        type: env_var_name
      azure-sp-password:
        default: AZURE_SP_PASSWORD
        description: |
          Name of environment variable storing the password for the Service Principal. Only applicable for Service Principal logins.
        type: env_var_name
      azure-sp-tenant:
        default: AZURE_SP_TENANT
        description: |
          Name of environment variable storing the tenant ID for the Service Principal. Only applicable for Service Principal logins.
        type: env_var_name
      azure-tenant:
        default: AZURE_TENANT
        description: |
          Environment variable storing your Azure tenant, necessary if `alternate-tenant` is set to true. Only applicable for user logins.
        type: env_var_name
      azure-username:
        default: AZURE_USERNAME
        description: |
          Environment variable storing your Azure username. Only applicable for user logins.
        type: env_var_name
    steps:
    - run:
        command: |
          if [ -n "${<< parameters.azure-username >>}" ]; then
            echo "User credentials detected; logging in with user"
            az login \
              <<#parameters.alternate-tenant>> \
              --tenant $<<parameters.azure-tenant>> <</parameters.alternate-tenant>> \
              -u $<<parameters.azure-username>> \
              -p $<<parameters.azure-password>>
          elif [ -n "${<< parameters.azure-sp >>}" ]; then
            echo "Service Principal credentials detected; logging in with Service Principal"
            az login \
              --service-principal \
              --tenant $<<parameters.azure-sp-tenant>> \
              -u $<<parameters.azure-sp>> \
              -p $<<parameters.azure-sp-password>>
          else
            echo "Login failed; neither user nor Service Principal credentials were provided"
            exit 1
          fi
        name: Login to the Azure CLI with user or Service Principal
description: |
  Install, initialize, and log into the Azure command-line interface (azcli)
examples:
  install:
    description: |
      Install the Azure CLI
    usage:
      jobs:
        verify-install:
          executor: azure-cli/default
          steps:
          - azure-cli/install
          - run:
              command: az -v
              name: Verify Azure CLI is installed
      orbs:
        azure-cli: circleci/azure-cli@1.0.0
      version: 2.1
      workflows:
        example-workflow:
          jobs:
          - verify-install
  login-with-service-principal:
    description: |
      Log into Azure with a Service Principal
    usage:
      jobs:
        login-to-azure:
          executor: azure-cli/azure-docker
          steps:
          - azure-cli/login-with-service-principal
          - run:
              command: az resource list
              name: List resources of tenant stored as `AZURE_SP_TENANT` env var
      orbs:
        azure-cli: circleci/azure-cli@1.0.0
      version: 2.1
      workflows:
        example-workflow:
          jobs:
          - login-to-azure
  login-with-user:
    description: |
      Install the Azure CLI, then log in with a username and password
    usage:
      jobs:
        login-to-azure:
          executor: azure-cli/default
          steps:
          - azure-cli/install
          - azure-cli/login-with-user:
              alternate-tenant: true
          - run:
              command: az resource list
              name: List resources of tenant stored as `AZURE_TENANT` env var
      orbs:
        azure-cli: circleci/azure-cli@1.0.0
      version: 2.1
      workflows:
        example-workflow:
          jobs:
          - login-to-azure
  login-with-user-or-service-principal:
    description: |
      Log into Azure with the login type determined based on environment variable detection.
    usage:
      jobs:
        login-to-azure:
          executor: azure-cli/azure-docker
          steps:
          - azure-cli/login-with-user-or-service-principal
          - run:
              command: az resource list
              name: List resources of tenant stored as `AZURE_SP_TENANT` env var
      orbs:
        azure-cli: circleci/azure-cli@1.0.0
      version: 2.1
      workflows:
        example-workflow:
          jobs:
          - login-to-azure
executors:
  azure-docker:
    description: |
      Microsoft's Azure CLI Docker image
    docker:
    - image: microsoft/azure-cli
  default:
    description: |
      Debian-based circleci/python Docker image to use
    docker:
    - image: circleci/python:<<parameters.python-version>>-<<parameters.debian-release>>
    parameters:
      debian-release:
        default: stretch
        type: string
      python-version:
        default: "2.7"
        type: string
version: 2.1
